// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: EventServiceInterface.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarClient interface {
	InsertEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*RepID, error)
	UpdateEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LookupEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*RepEvents, error)
	ListEvents(ctx context.Context, in *ReqByUser, opts ...grpc.CallOption) (*RepEvents, error)
	ListEventsDay(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
	ListEventsWeek(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
	ListEventsMonth(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) InsertEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*RepID, error) {
	out := new(RepID)
	err := c.cc.Invoke(ctx, "/api.Calendar/InsertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateEvent(ctx context.Context, in *ReqByEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Calendar/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) LookupEvent(ctx context.Context, in *ReqByID, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, "/api.Calendar/LookupEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEvents(ctx context.Context, in *ReqByUser, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, "/api.Calendar/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventsDay(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, "/api.Calendar/ListEventsDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventsWeek(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, "/api.Calendar/ListEventsWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventsMonth(ctx context.Context, in *ReqByUserByDate, opts ...grpc.CallOption) (*RepEvents, error) {
	out := new(RepEvents)
	err := c.cc.Invoke(ctx, "/api.Calendar/ListEventsMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
// All implementations must embed UnimplementedCalendarServer
// for forward compatibility
type CalendarServer interface {
	InsertEvent(context.Context, *ReqByEvent) (*RepID, error)
	UpdateEvent(context.Context, *ReqByEvent) (*emptypb.Empty, error)
	DeleteEvent(context.Context, *ReqByID) (*emptypb.Empty, error)
	LookupEvent(context.Context, *ReqByID) (*RepEvents, error)
	ListEvents(context.Context, *ReqByUser) (*RepEvents, error)
	ListEventsDay(context.Context, *ReqByUserByDate) (*RepEvents, error)
	ListEventsWeek(context.Context, *ReqByUserByDate) (*RepEvents, error)
	ListEventsMonth(context.Context, *ReqByUserByDate) (*RepEvents, error)
	mustEmbedUnimplementedCalendarServer()
}

// UnimplementedCalendarServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (UnimplementedCalendarServer) InsertEvent(context.Context, *ReqByEvent) (*RepID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (UnimplementedCalendarServer) UpdateEvent(context.Context, *ReqByEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedCalendarServer) DeleteEvent(context.Context, *ReqByID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedCalendarServer) LookupEvent(context.Context, *ReqByID) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEvent not implemented")
}
func (UnimplementedCalendarServer) ListEvents(context.Context, *ReqByUser) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedCalendarServer) ListEventsDay(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsDay not implemented")
}
func (UnimplementedCalendarServer) ListEventsWeek(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsWeek not implemented")
}
func (UnimplementedCalendarServer) ListEventsMonth(context.Context, *ReqByUserByDate) (*RepEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsMonth not implemented")
}
func (UnimplementedCalendarServer) mustEmbedUnimplementedCalendarServer() {}

// UnsafeCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServer will
// result in compilation errors.
type UnsafeCalendarServer interface {
	mustEmbedUnimplementedCalendarServer()
}

func RegisterCalendarServer(s grpc.ServiceRegistrar, srv CalendarServer) {
	s.RegisterService(&Calendar_ServiceDesc, srv)
}

func _Calendar_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/InsertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).InsertEvent(ctx, req.(*ReqByEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateEvent(ctx, req.(*ReqByEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*ReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_LookupEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).LookupEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/LookupEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).LookupEvent(ctx, req.(*ReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEvents(ctx, req.(*ReqByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventsDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventsDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/ListEventsDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventsDay(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventsWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventsWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/ListEventsWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventsWeek(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventsMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqByUserByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventsMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calendar/ListEventsMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventsMonth(ctx, req.(*ReqByUserByDate))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendar_ServiceDesc is the grpc.ServiceDesc for Calendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEvent",
			Handler:    _Calendar_InsertEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Calendar_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
		{
			MethodName: "LookupEvent",
			Handler:    _Calendar_LookupEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Calendar_ListEvents_Handler,
		},
		{
			MethodName: "ListEventsDay",
			Handler:    _Calendar_ListEventsDay_Handler,
		},
		{
			MethodName: "ListEventsWeek",
			Handler:    _Calendar_ListEventsWeek_Handler,
		},
		{
			MethodName: "ListEventsMonth",
			Handler:    _Calendar_ListEventsMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventServiceInterface.proto",
}
